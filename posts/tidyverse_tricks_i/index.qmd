---
title: "Tidyverse Tips I"
execute: 
  freeze: true
  eval: true
format:
  html:
    highlight: true
    code-fold: show
    code-tools: true
    highlight-style: github
    reference-location: margin
---

These are some tidyverse things that I Google more often than I would like to admit.

```{r}
#| output: false
library(tidyverse)
library(gt)
library(gtExtras)
```

The data was originally from Kaggle [^1]. 

::: {.column-margin}

[^1]: https://www.kaggle.com/crawford/80-cereals

:::

```{r}
cereal <- read_delim("https://github.com/becausejustyn/blog/raw/main/content/post/2021-07-12-tidyverse-tips/cereal.txt",
                     delim = "\t", 
                     col_types = cols(
                       type = readr::col_factor(levels = NULL),
                       mfr = readr::col_factor(levels = NULL)
                       ),
                     escape_double = FALSE, 
                     trim_ws = TRUE)
```

```{r}
cereal %>%
    gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

Adding some missing values for later.

```{r}
cereal1 <- cereal %>%
  #so sample iterates for each row
  rowwise() %>% 
  mutate(
    kids_rating = sample(c("A", "B", "C", NA), 1, replace = TRUE),
    adult_rating = sample(c("A", "B", "C", NA), 1, replace = TRUE, prob = c(0.1, 0.3, 0.5, 0.1))
      )
```

### Missing Values

-   `across()` is used instead of `_at()`, `_if()` and `_any()`

-   The function inside the `across()` call is referred to as a selection helper, which make life easier once you are comfortable with them.

-   You can use `everything()` to pick all the columns.

-   `~sum()` is similar notation to the `purrr` package.

```{r}
cereal1 %>%
  summarise(across(everything(), 
                   ~sum(is.na(.)))) %>%
  colSums() 
```

`ungroup()` version of above changes the way it is displayed.

```{r}
cereal1 %>%
  ungroup() %>%
  summarise(across(everything(), ~sum(is.na(.))))
```

Missing values in the `adult_rating` column.

```{r}
cereal1 %>%
  filter(if_any(adult_rating, is.na)) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

### Selection Helpers

-   `starts_with()`/`ends_with()`

-   `contains()`

-   `matches()`

-   `everything()`

-   `all_of()`

-   `any_of()`

-   `where()`

`contains()` example.
```{r}
cereal1 %>%
  select(contains("_rating")) 
```

```{r}
cereal3 <- cereal1 %>%
  ungroup()
```

### Distinct Column Values

You can select multiple columns by putting them in `c()` and then calling `n_distinct`

```{r}
cereal3 %>%
  summarise(across(c(mfr, type, kids_rating, adult_rating), n_distinct))
```

If you just want to see the values for every column you can use `everything()`

```{r}
cereal3 %>%
  summarise(across(everything(), n_distinct))
```

Looking for column titles that have a certain string such as a prefix, word or letter you can use `contains()`

```{r}
cereal3 %>%
  summarise(across(contains("e"), n_distinct))
```

If you only care about a particular data type, such as the numeric columns, you can use `where()` inside the `across()` call.

```{r}
cereal3 %>%
  summarise(across(where(is.numeric), n_distinct))
```

### Mutate

To create a new column, use `mutate()`

The `case_when()` function was used here to specify multiple conditions. `.after` and `.before` can be used to pick where you want the column located. The default is for the column to be on the far right.

```{r}
cereal %>%
  mutate(
    calorie_level = case_when(
      calories < 90 ~ 'Low',
      between(calories, 90, 110) ~ 'Moderate',
      calories > 110 ~ 'High'), 
      .after = calories
    ) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

Within one `mutate()` call you can create multiple columns with a comma.

```{r}
set.seed(2017) #reproducibility 
cereal2 <- cereal %>%
  rowwise() %>% #so sample iterates for each row
  mutate(
    kids_rating = sample(c("A", "B", "C", NA), 1, replace = TRUE),
    adult_rating = sample(c("A", "B", "C", NA), 1, replace = TRUE, prob = c(0.1, 0.3, 0.5, 0.1))
      )

cereal2 %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

To only show the rows without a condition such as missing values we use `filter()` with `!` in front of the value, e.g. `is.na()`

```{r}
cereal2 %>%
  filter(!is.na(adult_rating)) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

### Negative Values

```{r}
cereal2 %>%
  rowwise() %>%
  mutate(random_values = runif(1, min = -1, max = 1), .after = name) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

```{r}
#| warning: false
cereal2 %>%
  rowwise() %>%
  mutate(random_values = runif(1, min = -1, max = 1), .after = name) %>%
  filter(if_any(everything(), ~ . < 0)) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

Here we do the same thing except we only filter numeric columns for the formula call.

```{r}
#Find all rows where any numeric variable is less than zero
cereal2 %>%
  rowwise() %>%
  mutate(random_values = runif(1, min = -1, max = 1), .after = name) %>%
  filter(if_any(where(is.numeric), ~ .x < 0)) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

### %in% operator

```{r}
cereal2 %>%
  ungroup() %>%
  filter(protein %in% c(3, 4)) %>%
  gt() %>% 
    tab_options(container.height = '500px') %>%
    gt_theme_538() 
```

:::{.callout-caution collapse="true"}
## Session Info

```{r}
sessionInfo()
```
:::
