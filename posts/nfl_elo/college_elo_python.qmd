---
title: "Untitled"
format: html
---

```{python}
#https://blog.collegefootballdata.com/talking-tech-elo-ratings/
import cfbd
import datetime
import numpy as np
import pandas as pd
```

```{python}
# configure API key
configuration = cfbd.Configuration()
configuration.api_key['Authorization'] = '+TdVQcvhNBRAN948z/lsmZN4ETE9sQ60VyQtobVZ+ARur3G1brcO6FLqhoXAYZw1'
configuration.api_key_prefix['Authorization'] = 'Bearer'

# instantiate a games API instance
api_config = cfbd.ApiClient(configuration)
games_api = cfbd.GamesApi(cfbd.ApiClient(configuration))
```

```{python}
#logistic curve function

def get_expected_score(team_a, team_b):
    exp = (team_b - team_a) / 400
    return(1 / (1 + 10**exp))

#team_a_new_elo = team_a_old_elo + K (score for team A - expected score for team A)
```

```{python}
print(get_expected_score(1500, 1500))
print(get_expected_score(1500, 1400))
print(get_expected_score(1750, 1500))
print(get_expected_score(2000, 1500))
```

```{python}
#Making adjustments to Elo score based on the outcome of a game. 
# takes home team Elo rating, away team Elo rating, and final scoring margin as parameters and returns the new Elo ratings for the participants. 

def get_new_elos(home_rating, away_rating, margin):
    k = 25

    # score of 0.5 for a tie
    home_score = 0.5
    if margin > 0:
        # score of 1 for a win
        home_score = 1
    elif margin < 0:
        #score of 0 for a loss
        home_score = 0

    # get expected home score
    expected_home_score = get_expected_score(home_rating, away_rating)
    # multiply difference of actual and expected score by k value and adjust home rating
    new_home_score = home_rating + k * (home_score - expected_home_score)

    # repeat these steps for the away team
    # away score is inverse of home score
    away_score = 1 - home_score
    expected_away_score = get_expected_score(away_rating, home_rating)
    new_away_score = away_rating + k * (away_score - expected_away_score)

    # return a tuple
    return(round(new_home_score), round(new_away_score))
```

```{python}
# Again, we're merely finding the difference in actual and expected scores for each team, multiplying them by our predefined K factor of 25, and adding that adjustment to the pregame Elo scores. 
# Finally, we returned a tuple of two values, the first being the new Elo rating for the home team and the second being that of the away team. 
# I should probably also note that the margin value refers to the difference in home and away points (i.e. a positive value is a home win while a negative value is an away win)

# takes a data string and converts it to a datetime object for sorting
def date_sort(game):
    game_date = datetime.datetime.strptime(game['start_date'], "%Y-%m-%dT%H:%M:%S.000Z")
    return(game_date)

# returns an elo rating
def elo_sort(team):
    return(team['elo'])
```

```{python}
games = []

for year in range(2010, 2022):
    response = games_api.get_games(year = year)
    games = [*games, *response]

games = [dict(
            start_date = g.start_date,
            home_team = g.home_team,
            home_conference = g.home_conference,
            home_points = g.home_points,
            away_team = g.away_team,
            away_conference = g.away_conference,
            away_points = g.away_points
            ) for g in games if g.home_points is not None and g.away_points is not None]

games.sort(key = date_sort)
```

```{python}
# We can now loop through each game to calculate current Elo ratings for each team. 
# We will also be tracking pregame and postgame Elo ratings for each game for each team so that we can track team trends over time as well as look at how game outcomes affect team ratings.

# dict object to hold current Elo rating for each team
teams = dict()

# loop through games in order
for game in games:

    # get current rating for home team
    if game['home_team'] in teams:
        home_elo = teams[game['home_team']]
    elif game['home_conference'] is not None:
        # if no rating, set initial rating to 1500 for FBS teams
        home_elo = 1500
    else:
        # otherwise, set initial rating to 1200 for non-FBS teams
        home_elo = 1200

    # get current rating for away team
    if game['away_team'] in teams:
        away_elo = teams[game['away_team']]
    elif game['away_conference'] is not None:
        # if no rating, set initial rating to 1500 for FBS teams
        away_elo = 1500
    else:
        # otherwise, set initial rating to 1200 for non-FBS teams
        away_elo = 1200

    # calculate score margin from game
    margin = game['home_points'] - game['away_points']

    # get new elo ratings
    new_elos = get_new_elos(home_elo, away_elo, margin)

    # set pregame elos on game dict
    game['pregame_home_elo'] = home_elo
    game['pregame_away_elo'] = away_elo

    # set postgame elos on game dict
    game['postgame_home_elo'] = new_elos[0]
    game['postgame_away_elo'] = new_elos[1]

    # set current elo values in teams dict
    teams[game['home_team']] = new_elos[0]
    teams[game['away_team']] = new_elos[1]
```

```{python}
# For non-FBS teams, we'll set an initial rating of 1200.

#convert our team dict (which holds the current rating for each team) into a list ordered by rating from highest to lowest

end_elos = [dict(team = key, elo = teams[key]) for key in teams]
end_elos.sort(key = elo_sort, reverse = True)
```

```{python}
import matplotlib.pyplot as plt

# This is the styling I use. Check out other themes here: https://matplotlib.org/3.2.1/gallery/style_sheets/style_sheets_reference.html
plt.style.use('fivethirtyeight')

# Graph sizing
plt.rcParams["figure.figsize"] = [20,10]
```

```{python}
def generate_chart(team):
    team_games = []
    for game in games:
        if game['home_team'] == team:
            team_games.append(dict(start_date = game['start_date'], elo = game['postgame_home_elo']))

        if game['away_team'] == team:
            team_games.append(dict(start_date = game['start_date'], elo = game['postgame_away_elo']))

    df = pd.DataFrame.from_records(team_games)

    fig, ax = plt.subplots()
    ax.plot(df.index, df['elo'])

    ax.set(xlabel = 'Game No.', ylabel = 'Elo Rating',
           title = "Historical Elo Rating - {0}".format(team))

    plt.show()
```

```{python}
generate_chart('Michigan')
```

```{python}

```

```{python}

```

```{python}

```

```{python}

```