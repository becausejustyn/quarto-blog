---
title: "NFL Home Field Advantage"
execute: 
  freeze: true
  eval: true
format:
  html:
    highlight: true
    code-fold: show
    code-tools: true
    highlight-style: github
---


```{r}
#| warning: false
library(tidyverse)
library(broom)
library(rstan)
library(ggrepel)
library(gghighlight)
library(gt)
library(gtExtras)

future::plan("multisession")
```

```{r}
#| echo: false
#| output: false
pbp <- read_csv('pbp.csv')
```

If you do not have the data on your local device you can either swap the path with `https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds` or get it via `nflfastR::load_pbp(1999:2021)`. Note that it will take a while since there is over 1 million rows by 366-ish columns, which is why I filter and drop rows straight away. 

Using `{x}` with `glue()` allows us to loop every value input from the `map_df` call into the location. I found this super cool the first time I saw it. This is exactly like f strings in Python if you are familiar with that.
```{r}
#| eval: false

pbp <- purrr::map_df(c(1999:2021), function(x) {
  readRDS(
    glue::glue("~/Documents/nfl/data/pbp/play_by_play_{x}.rds")
  )}) %>%
  filter(
    season_type == 'REG',
    # drop values that no plays occur
    # e.g. timeout, halftime, etc.
    !is.na(posteam_type)
    ) %>%
  select(
    game_id, season, week, posteam_type, season_type, 
    home_team, away_team, home_score, away_score) %>%
  group_by(game_id) %>%
  # this will give two rows for each game, one for 
  # the home team, one for the away team
  #slice(n()) or distinct(game_id, posteam_type, 
  # .keep_all = TRUE) if you only want one observation per row
  distinct(.keep_all = TRUE)
```

```{r}
#| warning: false
# team
league_wide_win_team <- pbp %>%
  distinct(game_id, .keep_all = TRUE) %>%
  mutate(score_diff = home_score - away_score) %>%
  group_by(season, home_team) %>%
  summarise(
    n = n(),
    home_win = mean(home_score - away_score > 0),
    home_points_diff = sum(home_score - away_score)
  ) %>% ungroup() %>%
  mutate(
    mean_point_diff = home_points_diff / n,
    # so you can plot is sequentially
    week_n = row_number()
  ) 

#add team colours for plotting
league_wide_win_team <- league_wide_win_team %>%
  left_join(
    select(
      nflfastR::teams_colors_logos, 
      home_team = team_abbr, 
      team_name, team_color, 
      team_color2)
      )
```

```{r}
#| eval: false
league_wide_win_team %>%
  mutate(
    #LV colour is grey so I am using their secondary colour here
    team_color = ifelse(team_color == "#a5acaf", "#000000", team_color),
    season_label = paste0("'", substr(season, 3, 4)),
    season_label = as_factor(season_label)
    ) %>%
  ggplot(aes(
    # the label is a character, so get 99 at the start
    x = fct_reorder(season_label, season),
    y = mean_point_diff,
    colour = team_color,
    group = home_team,
  )) +
  geom_line(size = 1.15) +
  scale_x_discrete(breaks = paste0("'", seq(1999, 2021, 3) |> substr(3, 4))) +
  gghighlight(use_direct_label = FALSE, keep_scales = TRUE) +
  scale_color_identity(aesthetics = c("color", "fill")) +
  facet_wrap(~home_team, scales = "free", ncol = 5L) +
  labs(
    x = "Season",
    y = "HFA",
    title = "HFA By Team",
    subtitle = "Regular Season, 1999:2021",
    caption = "data: nflfastR"
  ) +
  becausejustynfun::white_theme() +
  theme(axis.text = element_text(size = 6))
```

::: {.column-screen}
![A full screen image](plots/league_wide_win_team.jpg)
:::

```{r}
#| eval: false
league_wide_win_team %>%
  ggplot(aes(
    x = factor(season), 
    y = mean_point_diff, 
    group = 1)) +
  geom_line(aes(group = factor(home_team)), alpha = 0.5) + 
  geom_line(stat = 'summary', fun = 'mean', colour = 'blue', size = 1) +
  scale_y_continuous(breaks = seq(-22, 24, 4)) +
  scale_x_discrete(labels = paste0("'", substr(c(1999:2021), 3, 4))) +
  labs(
    x = "Season",
    y = "HFA",
    title = "Home Field Advantage",
    subtitle = "Regular Season, 1999:2021",
    caption = "data: nflfastR \nBlue line is the mean HFA by season."
  ) +
  theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
  hrbrthemes::theme_ft_rc()
```

::: {.column-screen}
![A full screen image](plots/league_wide_win_league.jpg)
:::

```{r}
mod <- lm(mean_point_diff ~ factor(season), data = league_wide_win_team)

tidy(mod) %>% 
  gt() %>% 
  fmt_number(
    columns = c(2:5), 
    decimals = 3)
```

```{r}
#| eval: false
league_wide_win_team %>%
  ggplot(aes(
    x = factor(season), 
    y = mean_point_diff, group = 1)) +
  geom_line(aes(group = factor(home_team)), alpha = 1/2) + 
  geom_line(stat = 'summary', fun = 'mean', colour = 'blue', size = 1) +
  labs(
    x = "Season",
    y = "HFA",
    subtitle = "Regular Season, 1999:2021",
    caption = "data: nflfastR \n Pink line is the linear trend over time"
  ) +
  stat_smooth(method = 'lm', col = '#984ea3', se = FALSE, size = 1) +
  scale_x_discrete(labels = paste0("'", substr(c(1999:2021), 3, 4))) +
  theme(axis.text.x = element_text(angle = 15, hjust = 1)) +
  hrbrthemes::theme_ft_rc()
```

::: {.column-screen}
![A full screen image](plots/linear_trend.jpg)
:::

Removing this linear trend and focus on residuals will examine teams' performance after controlling for this decrease in hfa 

Average the residuals for each team then, perform a one-sample t-test to see teams that were above or below the average HFA despite the decrease HFA over this time 

```{r}
league_wide_win_team <- league_wide_win_team %>%
  mutate(rel_hfa = resid(mod))

best_hfa <- league_wide_win_team %>% 
  group_by(home_team) %>%
  summarise(
    mean = mean(rel_hfa),
    sd = sd(rel_hfa),
    sem = sd(rel_hfa)/sqrt(n()),
    tpval = t.test(rel_hfa)[['p.value']]
    #tpval = t.test(rel_hfa)$p.value
  ) %>%
  mutate(sig = tpval < .05)

best_hfa %>%
  gt() %>%
  fmt_number(columns = c(2:5), decimals = 3) %>%
  cols_label(
    home_team = "Home Team",
    mean = 'Mean',
    sd = 'SD',
    sem = 'SEM',
    tpval = "T P-val",
    sig = 'Sig'
  ) 
```

Plot the average residuals, their SEM, colouring if they are significantly different form 0 

```{r}
# y.axis bold conditional 
best_hfa_sort <- arrange(best_hfa, mean)                       
axisFace <- if_else(best_hfa_sort[['sig']] == TRUE, 'bold', 'plain')

# shading conditional 
above <- best_hfa %>% 
  filter(mean > 0, sig == TRUE) %>% 
  arrange(mean)

average <- best_hfa %>% 
  filter(sig == FALSE)

below <- best_hfa %>% 
  filter(mean < 0, sig == TRUE) %>% 
  arrange(mean)
```

```{r}
#| eval: false
best_hfa %>%
  ggplot(aes(
    x = mean,
    y = fct_reorder(home_team, mean),
    colour = sig
  )) +
  geom_errorbarh(aes(
    xmin = mean - sem,
    xmax = mean + sem
  )) +
  geom_point(size = 2) +
  scale_color_manual(
    values = c("grey", "black"),
    guide = guide_legend(
      reverse = TRUE,
      title = "Above/Below Average",
      title.position = "top"
    )
  ) +
  scale_x_continuous(breaks = seq(-7.5, 9, 1.5)) +
  labs(
    x = "Mean HFA (Residuals)",
    y = "NFL Team",
    title = "NFL Home Field Advantage 1999-2021",
    caption = "Error bars are SEM. \n TRUE is statistical signifance."
  ) +
  hrbrthemes::theme_ft_rc() +
  theme(
    axis.text.y = element_text(face = axisFace),
    plot.title = element_text(hjust = 0.5),
    legend.position = "bottom",
    legend.key = element_rect(colour = "transparent", fill = "transparent"),
    legend.key.width = unit(1, "in"),
    legend.key.height = unit(.5, "in"),
    legend.title.align = .5,
    axis.title.x = element_text(vjust = -1)
  ) +
  annotate("rect",
           xmin = -Inf,
           xmax = Inf,
           ymax = above[['home_team']][nrow(above)],
           ymin = above[['home_team']][1],
           fill = "#486e48",
           colour = NA,
           alpha = 1 / 3
  ) +
  annotate("rect",
           xmin = -Inf,
           xmax = Inf,
           ymax = below[['home_team']][nrow(below)],
           ymin = below[['home_team']][1],
           fill = "#346991",
           colour = NA,
           alpha = 1 / 3
  ) +
  annotate("text", x = -.1, y = above[['home_team']][3], label = "Best Teams") +
  annotate("text", x = .1, y = below[['home_team']][3], label = "Worst Teams")
```

::: {.column-screen}
![A full screen image](plots/hfa_sig_test.jpg)
:::




```{r}
# league wide
league_win <- pbp %>%
  distinct(game_id, .keep_all = TRUE) %>%
  mutate(score_diff = home_score - away_score) %>%
  group_by(season) %>%
  summarise(
    n = n(),
    home_win = mean(home_score - away_score > 0),
    home_points_diff = sum(home_score - away_score)
    ) %>% 
  mutate(
    mean_point_diff = home_points_diff / n
    )

#season, week wide
weekly_team_win <- pbp %>%
  distinct(game_id, .keep_all = TRUE) %>%
  mutate(score_diff = home_score - away_score) %>%
  group_by(season, week, home_team) %>%
  summarise(
    away_team,
    home_win = mean(home_score - away_score > 0),
    home_result = sum(home_score - away_score),
    .groups = "drop"
  ) 

weekly_team_win1 <- pbp %>%
  distinct(game_id, .keep_all = TRUE) %>%
  mutate(score_diff = home_score - away_score) %>%
  group_by(season, week) %>%
  summarise(
    team = home_team,
    n = n(),
    home_win = mean(home_score - away_score > 0),
    home_points_diff = sum(home_score - away_score),
    .groups = "drop"
  ) %>% 
  mutate(
    mean_point_diff = home_points_diff / n,
    week_n = row_number()
  ) 
```

```
data{
  int<lower=1> N_games; // number of games
  int<lower=1> N_teams; // number of teams
  int<lower=1,upper=N_teams> home_team[N_games]; // home team ID
  int<lower=1,upper=N_teams> away_team[N_games]; // away team ID
  
  vector[N_games] score; // home point differential
}

parameters{
  // hierarchical parameters
  real alpha_mean;
  real<lower=0> alpha_sigma;
  
  // team skill variance
  real<lower=0> mu_sigma;
  
  // observation variance
  real<lower=0> score_sigma;
  
  // HFA and skill vectors
  vector[N_teams] alpha_raw;
  vector[N_teams] mu;
}

transformed parameters{
  vector[N_teams] alpha;
  // centered parameterization helps mixing of alpha_sigma a lot
  alpha = alpha_mean + alpha_raw*alpha_sigma;

}

model{
  vector[N_games] score_mean;
  score_mean = alpha[home_team] + mu[home_team] - mu[away_team]; //mean for each game
  
  //currently using STAN default priors, uncomment to change
  //alpha_mean ~ normal(0,10);
  //alpha_sigma ~ normal(0,10);
  alpha_raw ~ std_normal();
  

  //mu_sigma ~ normal(0,10);
  mu ~ normal(0,mu_sigma);
  
  score ~ normal(score_mean,score_sigma);
}
```

```{r}
options(mc.cores = parallel::detectCores())

weekly_team_win <- pbp %>%
  distinct(game_id, .keep_all = TRUE) %>%
  mutate(score_diff = home_score - away_score) %>%
  group_by(season, week, home_team) %>%
  summarise(
    away_team,
    home_win = mean(home_score - away_score > 0),
    home_result = sum(home_score - away_score),
    .groups = "drop"
  ) 

team_vars <- distinct(weekly_team_win, home_team) %>% pull()
```

```{r}
#| eval: false
fits <- lapply(1999:2021,function(y){
  year <- y
  stan_df <- weekly_team_win %>% 
    filter(
      season == year #, location == "Home"
      )
  stan_list <- list(
      N_games = stan_df %>% nrow,
      N_teams = 32,
      home_team = stan_df %>% 
        pull(home_team) %>% match(team_vars),
      away_team = stan_df %>% 
        pull(away_team) %>% match(team_vars),
      score = stan_df %>% 
        pull(home_result)
    )
  
    fit <- stan('posts/nfl_hfa/season_model.stan',
                data = stan_list,
                iter = 2000,
                chains = 3,
                control = list(adapt_delta = 0.99),
                pars = c("score_mean"),
                include = FALSE)
    fit
})
```



```{r}
#| eval: false
if(!dir.exists("posts/nfl_hfa/output")) dir.create("posts/nfl_hfa/output")
save(team_vars, fits, file = "posts/nfl_hfa/output/team_effects_default_priors.Rdata")

load("output/team_effects_default_priors.Rdata")

stan_home_results <- map_df(1999:2021,function(y){
  fit <- fits[[y-1998]]
  output <- summary(fit,pars = c("alpha","alpha_mean","alpha_sigma"))$summary %>%
    as_tibble(rownames = "parameter") %>%
    mutate(season = y,
           team = c(team_vars,"ALL","ALL"))
  output
})

write_csv(stan_home_results, "stan_home_results.csv")
```

```{r}
#| output: false
stan_home_results <- read_csv('stan_home_results.csv')
```

```{r}
#| eval: false
#all teams HFA by season and team

stan_home_results %>%
  left_join(nflfastR::teams_colors_logos, by = c("team" = "team_abbr")) %>%
  mutate(
    # LV colour is grey so I am using their secondary colour here
    team_color = ifelse(team_color == "#a5acaf", "#000000", team_color),
    season_label = paste0("'", substr(season, 3, 4)),
    season_label = as_factor(season_label)
  ) %>%
  filter(!(team %in% "ALL")) %>%
  ggplot(aes(
    x = fct_reorder(season_label, season),
    # x = season,
    y = mean,
    group = team,
    colour = team_color
  )) +
  geom_line(size = 1.15) +
  scale_x_discrete(labels = paste0("'", substr(c(1999:2021), 3, 4))) +
  #scale_x_discrete(breaks = c("'99", "'01", "'03", "'05", "'07", "'09", "'11", "'13", "'15", "'17", "'19", "'21")) +
  gghighlight(use_direct_label = FALSE, keep_scales = TRUE) +
  scale_color_identity(aesthetics = c("color", "fill")) +
  facet_wrap(vars(team), scales = "free", ncol = 5L) +
  labs(
    x = "Season",
    y = "HFA",
    title = "HFA By Team",
    subtitle = "Regular Season, 1999:2021",
    caption = "data: nflfastR"
  ) +
  becausejustynfun::white_theme() +
  theme(axis.text = element_text(size = 6))
```

::: {.column-screen}
![A full screen image](plots/stan_team_hfa.jpg)
:::

```{r}
#| eval: false
#best and worst
stan_home_results %>%
  left_join(nflfastR::teams_colors_logos, by = c("team" = "team_abbr")) %>%
  filter(team != "ALL") %>%
  group_by(season) %>%
  mutate(mean_rank = rank(mean), n = n()) %>%
  filter(mean_rank %in% c(1, 32)) %>%
  mutate(
    hfa_bw = case_when(
      mean_rank == 1 ~ "Worst",
      mean_rank == 32 ~ "Best"
      )) %>%
  ggplot(aes(x = season, y = mean, color = hfa_bw)) +
  geom_line() +
  ggimage::geom_image(aes(image = team_logo_wikipedia, color = NULL), size = 0.05, by = "width") +
  becausejustynfun::white_theme() +
  #theme_bw() +
  scale_color_brewer(palette = "Set2") +
  theme(legend.position = "bottom") +
  labs(
    colour = "HFA Rank", 
    x = "Season", 
    y = "HFA (Points)",
    title = "Best & Worst Home-Field Advantage by \nSeason"
    ) 
```

::: {.column-screen}
![A full screen image](plots/league_hfa.jpg)
:::

```{r}
stan_table_df <- stan_home_results %>%
  filter(
    parameter != "alpha_sigma", 
    parameter != "alpha_mean"
    ) %>%
  group_by(team) %>%
  summarise(
    sd = sd(mean), 
    mean = mean(mean)
    ) %>%
  arrange(-mean) %>%
  left_join(select(nflfastR::teams_colors_logos, team = team_abbr, team_logo_espn), by = "team") %>%
  select(team_logo_espn, team, mean, sd)

stan_table_df %>%
  gt() %>%
  gtExtras::gt_img_rows(team_logo_espn) %>%
  tab_spanner(
    label = "HFA",
    columns = c(mean, sd)
  ) %>%
  cols_label(
    team_logo_espn = "",
    team = md("**Team**"),
    mean = md("**Mean**"),
    sd = md("**SD**")
  ) %>%
  fmt_number(columns = c(3, 4), decimals = 2)
```

