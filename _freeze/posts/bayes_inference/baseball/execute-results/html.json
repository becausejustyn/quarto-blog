{
  "hash": "5057b390d41e667f164eb56d4fa0b553",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nformat: html\nexecute: \n  eval: false\n---\n\n# Bayes Ball\n\n``` {.python .cell-code}\n# https://bookdown.org/content/927/james-stein.html\n# https://bayesball.github.io/BOOK/simulation-by-markov-chain-monte-carlo.html\nimport pandas as pd\nimport numpy as np\n```\n\n\n``` {.python .cell-code}\ndf = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data/lahman.csv')\ndf.head()\n```\n\n\n``` {.python .cell-code}\ndf = (df\n .query('yearID == 2018')\n .filter(['playerID', 'G', 'AB', 'H'])\n .groupby('playerID')\n .agg('mean')\n )\n\ndf['batting_avg'] = np.where(\n    pd.isna(df['H']/df['AB']), 0, df['H']/df['AB']\n)\n```\n\n\n``` {.python .cell-code}\ndf.head()\n```\n\n\n``` {.python .cell-code}\ndf.info\n```\n\n\n``` {.python .cell-code}\ndef james_stein_est(batting_avg, at_bats):\n  \"\"\"\n  James-Stein Estimator for BA\n  paper link: https://www.jstor.org/stable/24954030?seq=1\n  batting_avg: vector of batting averages\n  at_bats: vector of number of bats\n  \"\"\"\n\n  if len(batting_avg) != len(at_bats):\n    raise Exception('âœ¨âœ¨ Both vectors should be the sane length ðŸ˜­')\n\n  #which players were in at least the 50th percentile of at bats\n  percentile_50 = at_bats >= np.percentile(at_bats, 50)\n\n  # get group mean & sd of BA for for players who were at least in the \n  # 50th percentile of at bats\n  group_mean = np.mean(batting_avg[percentile_50])\n  group_sd = np.std(batting_avg[percentile_50])\n\n  # calc sum squares of players difference from group mean\n  sum_sq_diff = sum((batting_avg - group_mean)**2)\n\n  # calc c\n  c = 1 - ((len(at_bats) - 3) * group_sd**2) / sum_sq_diff\n\n  # given players measured BA and C, what is their estimated BA\n  js_estimate = group_mean + c * (batting_avg - group_mean)\n\n  return(js_estimate)\n```\n\n\n``` {.python .cell-code}\ndf2 = df.copy()\n\n# df2 = df2.assign(james_stein = james_stein_est(df2['batting_avg'], df2['AB']))\ndf2['james_stein'] = james_stein_est(df2['batting_avg'], df2['AB'])\n\n\"\"\"\ndf2 = (df2\n .assign(js_sd = np.where(\n     df2['AB'] == 0,\n     np.sqrt((df2['james_stein'] * (1 - df2['james_stein'])) / 1), \n     np.sqrt((df2['james_stein'] * (1 - df2['james_stein'])) / df2['AB'])\n     )\n )\n)\n\"\"\"\n\ndf2['js_sd'] = np.where(\n    df2['AB'] == 0,\n    np.sqrt((df2['james_stein'] * (1 - df2['james_stein'])) / 1), \n    np.sqrt((df2['james_stein'] * (1 - df2['james_stein'])) / df2['AB'])\n)\n\ndf2['low'] = np.where(df2['james_stein'] - df2['js_sd'] < 0, 0, df2['james_stein'] - df2['js_sd'])\ndf2['high'] = df2['james_stein'] + df2['js_sd']\n\n\"\"\"\ndf2 = (df2\n .assign(\n     low = np.where(df2['james_stein'] - df2['js_sd'] < 0, 0, df2['james_stein'] - df2['js_sd']),\n     high = df2['james_stein'] + df2['js_sd']\n ))  \n\"\"\"\n\n\ndf2.head()\n```\n\n\n``` {.python .cell-code}\n# add player info\n\npeople = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/data/bb_people.csv')\n\npeople['name'] = people['nameFirst'].str.cat(people['nameLast'], sep=' ')\npeople = people.filter(['playerID', 'name'])\n\n\"\"\"\npeople = (people\n          .assign(name = people['nameFirst'].str.cat(people['nameLast'], sep=' '))\n          .filter(['playerID', 'name'])\n          )\n\"\"\"\n\ndf3 = df2.copy()\ndf3 = df3.reset_index()\ndf3 = df3.merge(people, on='playerID', how='left')\n```\n\n\n``` {.python .cell-code}\ndf3.sort_values('batting_avg', ascending = False).reset_index()\n```\n\n\n",
    "supporting": [
      "baseball_files"
    ],
    "filters": [],
    "includes": {}
  }
}