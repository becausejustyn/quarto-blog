{
  "hash": "704d6d8d95b2a6b11c77f6d5ff46b967",
  "result": {
    "markdown": "---\ntitle: \"Tidyverse Tips II\"\nexecute: \n  freeze: true\n  eval: true\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(gt)\nlibrary(gtExtras)\n\nmidwest <- tibble(midwest)\n#midwest <- tibble::as_tibble(midwest)\n```\n:::\n\n\n#### Selecting Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  select(county, starts_with(\"A\")) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  county     area\n  <chr>     <dbl>\n1 ADAMS     0.052\n2 ALEXANDER 0.014\n3 BOND      0.022\n4 BOONE     0.017\n5 BROWN     0.018\n6 BUREAU    0.05 \n```\n:::\n:::\n\n\n#### Selecting Columns (Regex)\n\n`matches()` here results all columns that have the letter p followed by more than one letter that also contain the letter n.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  select(matches(\"p.+n\")) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  popdensity popamerindian popasian percamerindan percasian poppovertyknown\n       <dbl>         <int>    <int>         <dbl>     <dbl>           <int>\n1      1271.            98      249         0.148    0.377            63628\n2       759             19       48         0.179    0.452            10529\n3       681.            35       16         0.233    0.107            14235\n4      1812.            46      150         0.149    0.487            30337\n5       324.            14        5         0.240    0.0857            4815\n6       714.            65      195         0.182    0.546            35107\n# … with 1 more variable: percpovertyknown <dbl>\n```\n:::\n:::\n\n\n#### Reformatting All Column Names\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#could also use tolower()\nmidwest %>%\n  select_all(toupper) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 437 × 28\n     PID COUNTY  STATE  AREA POPTOTAL POPDENSITY POPWHITE POPBLACK POPAMERINDIAN\n   <int> <chr>   <chr> <dbl>    <int>      <dbl>    <int>    <int>         <int>\n 1   561 ADAMS   IL    0.052    66090      1271.    63917     1702            98\n 2   562 ALEXAN… IL    0.014    10626       759      7054     3496            19\n 3   563 BOND    IL    0.022    14991       681.    14477      429            35\n 4   564 BOONE   IL    0.017    30806      1812.    29344      127            46\n 5   565 BROWN   IL    0.018     5836       324.     5264      547            14\n 6   566 BUREAU  IL    0.05     35688       714.    35157       50            65\n 7   567 CALHOUN IL    0.017     5322       313.     5298        1             8\n 8   568 CARROLL IL    0.027    16805       622.    16519      111            30\n 9   569 CASS    IL    0.024    13437       560.    13384       16             8\n10   570 CHAMPA… IL    0.058   173025      2983.   146506    16559           331\n# … with 427 more rows, and 19 more variables: POPASIAN <int>, POPOTHER <int>,\n#   PERCWHITE <dbl>, PERCBLACK <dbl>, PERCAMERINDAN <dbl>, PERCASIAN <dbl>,\n#   PERCOTHER <dbl>, POPADULTS <int>, PERCHSD <dbl>, PERCOLLEGE <dbl>,\n#   PERCPROF <dbl>, POPPOVERTYKNOWN <int>, PERCPOVERTYKNOWN <dbl>,\n#   PERCBELOWPOVERTY <dbl>, PERCCHILDBELOWPOVERT <dbl>, PERCADULTPOVERTY <dbl>,\n#   PERCELDERLYPOVERTY <dbl>, INMETRO <int>, CATEGORY <chr>\n```\n:::\n:::\n\n\n### Cleaning Column Names\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#making an unclean database:\nmidwest2 <- midwest %>%\n  select(poptotal, popother, county, percbelowpoverty, category)\n\ncolnames(midwest2) <- c(\"pop total\", \"pop other\", \n                        \"county\", \"perc below poverty\", \"category\")\n\nmidwest2 %>%\n  select_all(~str_replace(., \" \", \"_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 437 × 5\n   pop_total pop_other county    `perc_below poverty` category\n       <int>     <int> <chr>                    <dbl> <chr>   \n 1     66090       124 ADAMS                    13.2  AAR     \n 2     10626         9 ALEXANDER                32.2  LHR     \n 3     14991        34 BOND                     12.1  AAR     \n 4     30806      1139 BOONE                     7.21 ALU     \n 5      5836         6 BROWN                    13.5  AAR     \n 6     35688       221 BUREAU                   10.4  AAR     \n 7      5322         0 CALHOUN                  15.1  LAR     \n 8     16805        84 CARROLL                  11.7  AAR     \n 9     13437         6 CASS                     13.9  AAR     \n10    173025      1596 CHAMPAIGN                15.6  HAU     \n# … with 427 more rows\n```\n:::\n:::\n\n\n### Filtering\n\nYou can use `near()` with the tolerance argument to find values close to a certain number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  select(county, poptotal) %>%\n  filter(near(\n    poptotal, 96000, tol = 15000\n    ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 2\n   county    poptotal\n   <chr>        <int>\n 1 KANKAKEE     96255\n 2 LA SALLE    106913\n 3 VERMILION    88257\n 4 CLARK        87777\n 5 HAMILTON    108936\n 6 JOHNSON      88109\n 7 LA PORTE    107066\n 8 MONROE      108978\n 9 VIGO        106107\n10 ALLEGAN      90509\n# … with 16 more rows\n```\n:::\n:::\n\n\nIf you want to filter your rows on multiple values, you can use the `%in%` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  select(poptotal, popother, county, percbelowpoverty, category) %>%\n  filter(county %in% c(\"IOWA\", \"JERSEY\", \"PARKE\", \"FULTON\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  poptotal popother county percbelowpoverty category\n     <int>    <int> <chr>             <dbl> <chr>   \n1    38080      107 FULTON            15.5  AAR     \n2    20539       22 JERSEY             9.74 AAU     \n3    18840       51 FULTON            10.3  AAR     \n4    15410       12 PARKE             12.2  AAR     \n5    38498     1109 FULTON             6.23 ALU     \n6    20150       10 IOWA               9.99 HAR     \n```\n:::\n:::\n\n\nTo return all rows where only one condition is met you can use `xor()` from base.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  filter(xor(popother < 80, percbelowpoverty > 15))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 189 × 28\n     PID county  state  area poptotal popdensity popwhite popblack popamerindian\n   <int> <chr>   <chr> <dbl>    <int>      <dbl>    <int>    <int>         <int>\n 1   563 BOND    IL    0.022    14991       681.    14477      429            35\n 2   565 BROWN   IL    0.018     5836       324.     5264      547            14\n 3   569 CASS    IL    0.024    13437       560.    13384       16             8\n 4   570 CHAMPA… IL    0.058   173025      2983.   146506    16559           331\n 5   571 CHRIST… IL    0.042    34418       819.    34176       82            51\n 6   572 CLARK   IL    0.03     15921       531.    15842       10            26\n 7   575 COLES   IL    0.03     51644      1721.    50177      925            92\n 8   577 CRAWFO… IL    0.026    19464       749.    19300       63            34\n 9   578 CUMBER… IL    0.02     10670       534.    10627        5             6\n10   580 DE WITT IL    0.023    16516       718.    16387       25            37\n# … with 179 more rows, and 19 more variables: popasian <int>, popother <int>,\n#   percwhite <dbl>, percblack <dbl>, percamerindan <dbl>, percasian <dbl>,\n#   percother <dbl>, popadults <int>, perchsd <dbl>, percollege <dbl>,\n#   percprof <dbl>, poppovertyknown <int>, percpovertyknown <dbl>,\n#   percbelowpoverty <dbl>, percchildbelowpovert <dbl>, percadultpoverty <dbl>,\n#   percelderlypoverty <dbl>, inmetro <int>, category <chr>\n```\n:::\n:::\n\n\nReturn all rows where `popother` is less than $80$, but `percbelowpoverty` does not exceed $15%$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  filter(popother < 80, !percbelowpoverty > 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 153 × 28\n     PID county  state  area poptotal popdensity popwhite popblack popamerindian\n   <int> <chr>   <chr> <dbl>    <int>      <dbl>    <int>    <int>         <int>\n 1   563 BOND    IL    0.022    14991       681.    14477      429            35\n 2   565 BROWN   IL    0.018     5836       324.     5264      547            14\n 3   569 CASS    IL    0.024    13437       560.    13384       16             8\n 4   571 CHRIST… IL    0.042    34418       819.    34176       82            51\n 5   572 CLARK   IL    0.03     15921       531.    15842       10            26\n 6   577 CRAWFO… IL    0.026    19464       749.    19300       63            34\n 7   578 CUMBER… IL    0.02     10670       534.    10627        5             6\n 8   580 DE WITT IL    0.023    16516       718.    16387       25            37\n 9   584 EDWARDS IL    0.014     7440       531.     7401        6             8\n10   585 EFFING… IL    0.028    31704      1132.    31523       12            45\n# … with 143 more rows, and 19 more variables: popasian <int>, popother <int>,\n#   percwhite <dbl>, percblack <dbl>, percamerindan <dbl>, percasian <dbl>,\n#   percother <dbl>, popadults <int>, perchsd <dbl>, percollege <dbl>,\n#   percprof <dbl>, poppovertyknown <int>, percpovertyknown <dbl>,\n#   percbelowpoverty <dbl>, percchildbelowpovert <dbl>, percadultpoverty <dbl>,\n#   percelderlypoverty <dbl>, inmetro <int>, category <chr>\n```\n:::\n:::\n\n\n### Counting\n\nThe `count()` function has a sort argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmidwest %>%\n  count(category, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 × 2\n   category     n\n   <chr>    <int>\n 1 AAR        193\n 2 AAU         77\n 3 LAR         30\n 4 LHR         28\n 5 HLU         26\n 6 ALU         20\n 7 HAU         20\n 8 AHR         16\n 9 ALR         11\n10 HAR          6\n11 LAU          3\n12 HLR          2\n13 LHU          2\n14 AHU          1\n15 HHR          1\n16 HHU          1\n```\n:::\n:::\n\n\nThis was just a quick one. I think better examples are when you do a project, so I will display more complex situations later on.\n\n:::{.callout-caution collapse=\"true\"}\n## Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] gtExtras_0.2.3  gt_0.3.1        forcats_0.5.1   stringr_1.4.0  \n [5] dplyr_1.0.9     purrr_0.3.4     readr_2.1.2     tidyr_1.2.0    \n [9] tibble_3.1.7    ggplot2_3.3.6   tidyverse_1.3.1\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.8.3           lubridate_1.8.0        assertthat_0.2.1      \n [4] digest_0.6.29          utf8_1.2.2             R6_2.5.1              \n [7] cellranger_1.1.0       backports_1.4.1        reprex_2.0.1          \n[10] evaluate_0.15          httr_1.4.3             pillar_1.7.0          \n[13] rlang_1.0.2            readxl_1.3.1           rstudioapi_0.13.0-9000\n[16] fontawesome_0.2.2.9000 rmarkdown_2.14         webshot_0.5.2         \n[19] htmlwidgets_1.5.4      munsell_0.5.0          broom_0.8.0           \n[22] compiler_4.1.2         modelr_0.1.8           xfun_0.31.2           \n[25] pkgconfig_2.0.3        htmltools_0.5.2        tidyselect_1.1.2      \n[28] fansi_1.0.3            crayon_1.5.1           tzdb_0.2.0            \n[31] dbplyr_2.1.1           withr_2.5.0            grid_4.1.2            \n[34] jsonlite_1.8.0         gtable_0.3.0           lifecycle_1.0.1       \n[37] DBI_1.1.2              magrittr_2.0.3         scales_1.2.0          \n[40] cli_3.3.0              stringi_1.7.6          renv_0.15.5           \n[43] fs_1.5.2               xml2_1.3.3             paletteer_1.4.0       \n[46] ellipsis_0.3.2         generics_0.1.2         vctrs_0.4.1           \n[49] rematch2_2.1.2         tools_4.1.2            glue_1.6.2            \n[52] hms_1.1.1              fastmap_1.1.0          yaml_2.3.5            \n[55] colorspace_2.0-3       rvest_1.0.2            knitr_1.39            \n[58] haven_2.4.3           \n```\n:::\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}