{
  "hash": "d8225374ce7480c5de52fafa9173907e",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nexecute: \n  freeze: true\n  eval: false\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nflfastR)\nlibrary(reticulate)\n\npbp <- load_pbp(season = 2021) %>%\n  filter(game_id == '2021_20_BUF_KC')\n\nwrite_csv(pbp, \"buf_vs_kc.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = pd.concat(\n    [nfl.load_pbp_data(season).assign(season = season) for season in range(1999, 2021)]\n)\n\n#if you do not want to install nflfastpy\n\n# Read in data\nYEAR = 2021\n\ndata = pd.read_csv(\n  'https://github.com/guga31bb/nflfastR-data/blob/master/data/play_by_play_' + \n  str(YEAR) + '.csv.gz?raw=True',\n  compression = 'gzip', low_memory = False)\n```\n:::\n\n\nHowever, I am using python via `reticulate` for this, so I could easily load the data through R and then send it over to python.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npbp <- purrr::map_df(c(2010:2021), function(x) {\n  readRDS(\n      glue::glue(\"https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds\")\n    )\n})\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- reticulate::r_to_py(pbp)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n```\n:::\n\n\nIf you get an error such as \n\n> ModuleNotFoundError: No module named 'matplotlib'\n\nThen you can install `matplotlib` in the terminal via `pip install matplotlib`\n\nI added the data via R, so now I need to move it over to python.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = r.data\ndata_df = data.copy()\nprint(data.head())\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#View a random sample of our df to ensure everything is correct          \ndata.sample(3)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#The last step in preprocessing for this particular analysis is dropping null values to avoid jumps in our WP chart. To clean things up, we can filter the columns to show only those that are of importance to us.\n\ncols = ['home_wp', 'away_wp', 'game_seconds_remaining']\ndata_df = data_df[cols].dropna()\n\n#View new df to again ensure everything is correct\ndata_df\n```\n:::\n\n\n### Game Excitement Index  \n\n\n$$\n\\frac{2400}{\\text{Length of Game}} \\sum_{i = 2}^{\\text{n plays}} \\mid \\text{WinProb(i) - WinProb(i - 1)} \\mid\n$$\n\n\n> the formula sums the absolute value of the win probability change from each play\n\n`https://sports.sites.yale.edu/game-excitement-index-part-ii`\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Calculate average length of 2019 games for use in our function\navg_length = data.groupby(by = ['game_id'])['epa'].count().mean()\n\ndef calc_gei(game_id):\n  game = data[(data['game_id']==game_id)]\n  #Length of game\n  length = len(game)\n  #Adjusting for game length\n  normalize = avg_length / length\n  #Get win probability differences for each play\n  win_prob_change = game['home_wp'].diff().abs()\n  #Normalization\n  gei = normalize * win_prob_change.sum()\n  return(gei)\n\nprint(f\"Buffalo @ Chiefs GEI: {calc_gei('2021_20_BUF_KC')}\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Set style\nplt.style.use('dark_background')\n\n#Create a figure\nfig, ax = plt.subplots(figsize=(16,8))\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#Generate lineplots\nsns.lineplot('game_seconds_remaining', 'away_wp', \n             data=data_df, color='#3B47CC',linewidth=2)\n\nsns.lineplot('game_seconds_remaining', 'home_wp', \n             data=data_df, color='#E31837',linewidth=2)\n\n#Generate fills for the favored team at any given time\n\nax.fill_between(data_df['game_seconds_remaining'], 0.5, data_df['away_wp'], \n                where=data_df['away_wp']>.5, color = '#3B47CC',alpha=0.3)\n\nax.fill_between(data_df['game_seconds_remaining'], 0.5, data_df['home_wp'], \n                where=data_df['home_wp']>.5, color = '#E31837',alpha=0.3)\n                \n#Labels\nplt.ylabel('Win Probability %', fontsize=16)\nplt.xlabel('', fontsize=16)\n\n#Divider lines for aesthetics\nplt.axvline(x=900, color='white', alpha=0.7)\nplt.axvline(x=1800, color='white', alpha=0.7)\nplt.axvline(x=2700, color='white', alpha=0.7)\nplt.axhline(y=.50, color='white', alpha=0.7)\n\n#Format and rename xticks\nax.set_xticks(np.arange(0, 3601,900))\n\nplt.gca().invert_xaxis()\nx_ticks_labels = ['End','End Q3','Half','End Q1','Kickoff']\nax.set_xticklabels(x_ticks_labels, fontsize=12)\n\n#Titles\n\n#[Text(0, 0, 'End'), Text(900, 0, 'End Q3'), Text(1800, 0, 'Half'), Text(2700, 0, 'End Q1'), Text(3600, 0, 'Kickoff')]\n\nplt.suptitle('Buffalo Bills @ Kansas City Chiefs', \n             fontsize=20, style='italic',weight='bold')\n\nplt.title('KC 42, BUF 36 - Div Round ', fontsize=16, \n          style='italic', weight='semibold')\n\n#Creating a textbox with GEI score\nprops = dict(boxstyle='round', facecolor='black', alpha=0.6)\nplt.figtext(.133,.85,'Game Excitement Index (GEI): 7.29',style='italic',bbox=props)\n\n#Citations\nplt.figtext(0.131,0.137,'Data: @nflfastR')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.show()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}