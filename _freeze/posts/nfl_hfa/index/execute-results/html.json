{
  "hash": "f78ee7654bac8c444faa615217330de2",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nexecute: \n  freeze: true\n  eval: false\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(rstan)\nlibrary(ggrepel)\nlibrary(gghighlight)\n\nfuture::plan(\"multisession\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# if you do not have the data on your local device you can either \n# swap the path with \"https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds\"\n# or get it via nflfastR::load_pbp(1999:2021)\n# note that it will take a while since there is over 1 million rows by 366-ish columns \n# that is why I filter and drop rows straight away\n\npbp <- purrr::map_df(c(1999:2021), function(x) {\n  readRDS(\n    glue::glue(\"~/Documents/nfl/data/pbp/play_by_play_{x}.rds\")\n  )}) %>%\n  filter(\n    season_type == 'REG',\n    !is.na(posteam_type)\n    ) %>%\n  select(game_id, season, week, posteam_type, season_type, home_team, away_team, home_score, away_score) %>%\n  group_by(game_id) %>%\n  # this will give two rows for each game, one for the home team, one for the away team\n  #slice(n()) or distinct(game_id, posteam_type, .keep_all = TRUE) if you only want one observation per row\n  distinct(.keep_all = TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# team\nleague_wide_win_team <- pbp %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  mutate(score_diff = home_score - away_score) %>%\n  group_by(season, home_team) %>%\n  summarise(\n    n = n(),\n    home_win = mean(home_score - away_score > 0),\n    home_points_diff = sum(home_score - away_score)\n  ) %>% ungroup() %>%\n  mutate(\n    mean_point_diff = home_points_diff / n,\n    # so you can plot is sequentially\n    week_n = row_number()\n  ) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#add team colours for plotting\nleague_wide_win_team <- league_wide_win_team %>%\n  left_join(\n    select(nflfastR::teams_colors_logos, home_team = team_abbr, team_name, team_color, team_color2)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleague_wide_win_team %>%\n  mutate(\n    #LV colour is grey so I am using their secondary colour here\n    team_color = ifelse(team_color == \"#a5acaf\", \"#000000\", team_color),\n    season_label = paste0(\"'\", substr(season, 3, 4)),\n    season_label = as_factor(season_label)\n    ) %>%\n  ggplot(aes(\n    # the label is a character, so get 99 at the start\n    x = fct_reorder(season_label, season),\n    y = mean_point_diff,\n    colour = team_color,\n    group = home_team,\n  )) +\n  geom_line(size = 1.15) +\n  scale_x_discrete(breaks = c(\"'99\", \"'01\", \"'03\", \"'05\", \"'07\", \"'09\", \"'11\", \"'13\", \"'15\", \"'17\", \"'19\", \"'21\")) +\n  gghighlight(use_direct_label = FALSE, keep_scales = TRUE) +\n  scale_color_identity(aesthetics = c(\"color\", \"fill\")) +\n  facet_wrap(~home_team, scales = \"free\", nrow = 4L) +\n  labs(\n    x = \"Season\",\n    y = \"HFA\",\n    title = \"HFA By Team\",\n    subtitle = \"Regular Season, 1999:2021\",\n    caption = \"data: nflfastR\"\n  ) +\n  becausejustynfun::white_theme() +\n  theme(axis.text = element_text(size = 8))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleague_wide_win_team %>%\n  ggplot(aes(\n    x = factor(season), \n    y = mean_point_diff, \n    group = 1)) +\n  geom_line(aes(group = factor(home_team)), alpha = 0.5) + \n  geom_line(stat = 'summary', fun = 'mean', colour = 'blue', size = 1) +\n  scale_y_continuous(breaks = seq(-22, 24, 4)) +\n  scale_x_discrete(labels = paste0(\"'\", substr(c(1999:2021), 3, 4))) +\n  labs(\n    x = \"Season\",\n    y = \"HFA\",\n    title = \"Home Field Advantage\",\n    subtitle = \"Regular Season, 1999:2021\",\n    caption = \"data: nflfastR \\nBlue line is the mean HFA by season.\"\n  ) +\n  theme(axis.text.x = element_text(angle = 15, hjust = 1)) +\n  hrbrthemes::theme_ft_rc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(mean_point_diff ~ factor(season), data = league_wide_win_team)\nsummary(mod)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleague_wide_win_team %>%\n  ggplot(aes(\n    x = factor(season), \n    y = mean_point_diff, group = 1)) +\n  geom_line(aes(group = factor(home_team)), alpha = 1/2) + \n  geom_line(stat = 'summary', fun = 'mean', colour = 'blue', size = 1) +\n  labs(\n    x = \"Season\",\n    y = \"HFA\",\n    subtitle = \"Regular Season, 1999:2021\",\n    caption = \"data: nflfastR \\n Pink line is the linear trend over time\"\n  ) +\n  stat_smooth(method = 'lm', col = '#984ea3', se = FALSE, size = 1) +\n  scale_x_discrete(labels = paste0(\"'\", substr(c(1999:2021), 3, 4))) +\n  theme(axis.text.x = element_text(angle = 15, hjust = 1)) +\n  hrbrthemes::theme_ft_rc()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing this linear trend and focus on residuals will examine teams' performance after controlling for this decrease in hfa \n\nleague_wide_win_team <- league_wide_win_team %>%\n  mutate(rel_hfa = resid(mod))\n\n# Average the residuals for each team then, perform a one-sample t-test to see teams that were above\n# or below the average HFA despite the decrease HFA over this time \n\nbest_hfa <- league_wide_win_team %>% \n  group_by(home_team) %>%\n  summarise(\n    mean = mean(rel_hfa),\n    sd = sd(rel_hfa),\n    sem = sd(rel_hfa)/sqrt(n()),\n    tpval = t.test(rel_hfa)[['p.value']]\n    #tpval = t.test(rel_hfa)$p.value\n  ) %>%\n  mutate(sig = tpval < .05)\n\nprint(best_hfa)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the average residuals, their SEM, colouring if they are significantly different form 0 \n\n# y.axis bold conditional \nbest_hfa_sort <- arrange(best_hfa, mean)                       \naxisFace <- if_else(best_hfa_sort[['sig']] == TRUE, 'bold', 'plain')\n\n# shading conditional \nabove <- best_hfa %>% \n  filter(mean > 0, sig == TRUE) %>% \n  arrange(mean)\n\naverage <- best_hfa %>% \n  filter(sig == FALSE)\n\nbelow <- best_hfa %>% \n  filter(mean < 0, sig == TRUE) %>% \n  arrange(mean)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_hfa %>%\n  ggplot(aes(\n    x = mean,\n    y = fct_reorder(home_team, mean),\n    colour = sig\n  )) +\n  geom_errorbarh(aes(\n    xmin = mean - sem,\n    xmax = mean + sem\n  )) +\n  geom_point(size = 2) +\n  scale_color_manual(\n    values = c(\"grey\", \"black\"),\n    guide = guide_legend(\n      reverse = TRUE,\n      title = \"Above/Below Average\",\n      title.position = \"top\"\n    )\n  ) +\n  scale_x_continuous(breaks = seq(-7.5, 9, 1.5)) +\n  labs(\n    x = \"Mean HFA (Residuals)\",\n    y = \"NFL Team\",\n    title = \"NFL Home Field Advantage 1999-2021\",\n    caption = \"Error bars are SEM. \\n TRUE is statistical signifance.\"\n  ) +\n  hrbrthemes::theme_ft_rc() +\n  theme(\n    axis.text.y = element_text(face = axisFace),\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    legend.key = element_rect(colour = \"transparent\", fill = \"transparent\"),\n    legend.key.width = unit(1, \"in\"),\n    legend.key.height = unit(.5, \"in\"),\n    legend.title.align = .5,\n    axis.title.x = element_text(vjust = -1)\n  ) +\n  annotate(\"rect\",\n           xmin = -Inf,\n           xmax = Inf,\n           ymax = above[['home_team']][nrow(above)],\n           ymin = above[['home_team']][1],\n           fill = \"#486e48\",\n           colour = NA,\n           alpha = 1 / 3\n  ) +\n  annotate(\"rect\",\n           xmin = -Inf,\n           xmax = Inf,\n           ymax = below[['home_team']][nrow(below)],\n           ymin = below[['home_team']][1],\n           fill = \"#346991\",\n           colour = NA,\n           alpha = 1 / 3\n  ) +\n  annotate(\"text\", x = -.1, y = above[['home_team']][3], label = \"Best Teams\") +\n  annotate(\"text\", x = .1, y = below[['home_team']][3], label = \"Worst Teams\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# league wide\nleague_win <- pbp %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  mutate(score_diff = home_score - away_score) %>%\n  group_by(season) %>%\n  summarise(\n    n = n(),\n    home_win = mean(home_score - away_score > 0),\n    home_points_diff = sum(home_score - away_score)\n    ) %>% \n  mutate(\n    mean_point_diff = home_points_diff / n\n    )\n\n#season, week wide\nweekly_team_win <- pbp %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  mutate(score_diff = home_score - away_score) %>%\n  group_by(season, week, home_team) %>%\n  summarise(\n    away_team,\n    home_win = mean(home_score - away_score > 0),\n    home_result = sum(home_score - away_score),\n    .groups = \"drop\"\n  ) \n\nweekly_team_win1 <- pbp %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  mutate(score_diff = home_score - away_score) %>%\n  group_by(season, week) %>%\n  summarise(\n    team = home_team,\n    n = n(),\n    home_win = mean(home_score - away_score > 0),\n    home_points_diff = sum(home_score - away_score),\n    .groups = \"drop\"\n  ) %>% \n  mutate(\n    mean_point_diff = home_points_diff / n,\n    week_n = row_number()\n  ) \n```\n:::\n\n\n```\ndata{\n  int<lower=1> N_games; // number of games\n  int<lower=1> N_teams; // number of teams\n  int<lower=1,upper=N_teams> home_team[N_games]; // home team ID\n  int<lower=1,upper=N_teams> away_team[N_games]; // away team ID\n  \n  vector[N_games] score; // home point differential\n}\n\nparameters{\n  // hierarchical parameters\n  real alpha_mean;\n  real<lower=0> alpha_sigma;\n  \n  // team skill variance\n  real<lower=0> mu_sigma;\n  \n  // observation variance\n  real<lower=0> score_sigma;\n  \n  // HFA and skill vectors\n  vector[N_teams] alpha_raw;\n  vector[N_teams] mu;\n}\n\ntransformed parameters{\n  vector[N_teams] alpha;\n  // centered parameterization helps mixing of alpha_sigma a lot\n  alpha = alpha_mean + alpha_raw*alpha_sigma;\n\n}\n\nmodel{\n  vector[N_games] score_mean;\n  score_mean = alpha[home_team] + mu[home_team] - mu[away_team]; //mean for each game\n  \n  //currently using STAN default priors, uncomment to change\n  //alpha_mean ~ normal(0,10);\n  //alpha_sigma ~ normal(0,10);\n  alpha_raw ~ std_normal();\n  \n\n  //mu_sigma ~ normal(0,10);\n  mu ~ normal(0,mu_sigma);\n  \n  score ~ normal(score_mean,score_sigma);\n}\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\n\nweekly_team_win <- pbp %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  mutate(score_diff = home_score - away_score) %>%\n  group_by(season, week, home_team) %>%\n  summarise(\n    away_team,\n    home_win = mean(home_score - away_score > 0),\n    home_result = sum(home_score - away_score),\n    .groups = \"drop\"\n  ) \n\nteam_vars <- distinct(weekly_team_win, home_team) %>% pull()\n\nfits <- lapply(1999:2021,function(y){\n  year <- y\n  stan_df <- weekly_team_win %>% \n    filter(\n      season == year #, location == \"Home\"\n      )\n  stan_list <- list(\n      N_games = stan_df %>% nrow,\n      N_teams = 32,\n      home_team = stan_df %>% \n        pull(home_team) %>% match(team_vars),\n      away_team = stan_df %>% \n        pull(away_team) %>% match(team_vars),\n      score = stan_df %>% \n        pull(home_result)\n    )\n  \n    fit <- stan(\"~/Downloads/nfl_new/NFL_HFA-master/scripts/season_model.stan\",\n                data = stan_list,\n                iter = 2000,\n                chains = 3,\n                control = list(adapt_delta = 0.99),\n                pars = c(\"score_mean\"),\n                include = FALSE)\n    fit\n})\n\nif(!dir.exists(\"~/Downloads/nfl_new/NFL_HFA-master/output\")) dir.create(\"~/Downloads/nfl_new/NFL_HFA-master/output\")\nsave(team_vars, fits, file = \"~/Downloads/nfl_new/NFL_HFA-master/output/team_effects_default_priors.Rdata\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#all teams HFA by season and team\n\n\nstan_home_results %>%\n  left_join(nflfastR::teams_colors_logos, by = c(\"team\" = \"team_abbr\")) %>%\n  mutate(\n    # LV colour is grey so I am using their secondary colour here\n    team_color = ifelse(team_color == \"#a5acaf\", \"#000000\", team_color),\n    season_label = paste0(\"'\", substr(season, 3, 4)),\n    season_label = as_factor(season_label)\n  ) %>%\n  filter(!(team %in% \"ALL\")) %>%\n  ggplot(aes(\n    x = fct_reorder(season_label, season),\n    # x = season,\n    y = mean,\n    group = team,\n    colour = team_color\n  )) +\n  geom_line(size = 1.15) +\n  scale_x_discrete(breaks = c(\"'99\", \"'01\", \"'03\", \"'05\", \"'07\", \"'09\", \"'11\", \"'13\", \"'15\", \"'17\", \"'19\", \"'21\")) +\n  gghighlight(use_direct_label = FALSE, keep_scales = TRUE) +\n  scale_color_identity(aesthetics = c(\"color\", \"fill\")) +\n  facet_wrap(vars(team), scales = \"free\", ncol = 8L) +\n  labs(\n    x = \"Season\",\n    y = \"HFA\",\n    title = \"HFA By Team\",\n    subtitle = \"Regular Season, 1999:2021\",\n    caption = \"data: nflfastR\"\n  ) +\n  becausejustynfun::white_theme() +\n  theme(axis.text = element_text(size = 8))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#best and worst\nbest_worst <- stan_home_results %>%\n  left_join(nflfastR::teams_colors_logos, by = c(\"team\" = \"team_abbr\")) %>%\n  filter(team != \"ALL\") %>%\n  group_by(season) %>%\n  mutate(mean_rank = rank(mean), n = n()) %>%\n  filter(mean_rank %in% c(1, 32)) %>%\n  mutate(\n    hfa_bw = case_when(\n      mean_rank == 1 ~ \"Worst\",\n      mean_rank == 32 ~ \"Best\"\n      )) %>%\n  ggplot(aes(x = season, y = mean, color = hfa_bw)) +\n  # scale_color_manual(breaks = nflfastR::teams_colors_logos$team_abbr,\n  #                    values = nflfastR::teams_colors_logos$team_color) +\n  geom_line() +\n  ggimage::geom_image(aes(image = team_logo_wikipedia, color = NULL), size = 0.05, by = \"width\") +\n  theme_bw() +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\") +\n  labs(\n    colour = \"HFA Rank\", \n    x = \"Season\", \n    y = \"HFA (Points)\",\n    title = \"Best and Worst Home-Field Advantage by Season\"\n    ) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstan_home_results %>%\n  filter(\n    parameter != \"alpha_sigma\", \n    parameter != \"alpha_mean\"\n    ) %>%\n  group_by(team) %>%\n  summarise(\n    sd = sd(mean), \n    mean = mean(mean)\n    ) %>%\n  arrange(-mean) %>%\n  left_join(select(nflfastR::teams_colors_logos, team = team_abbr, team_logo_espn), by = \"team\") %>%\n  mutate(\n    team_logo_espn = str_c(\"![](\", team_logo_espn, \"){width=30px}\")) %>%\n  select(team_logo_espn, team, mean, sd) %>%\n  knitr::kable(digits = 2, col.names = c(\"\", \"Team\", \"HFA (Mean)\", \"HFA (SD)\"), align = \"clcc\") %>%\n  kableExtra::kable_styling(bootstrap_options = \"striped\", full_width = F)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}