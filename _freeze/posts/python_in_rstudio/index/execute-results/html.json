{
  "hash": "e5e0547873972c966ddd6d1fdfa845b3",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nexecute: \n  eval: false\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\n```\n:::\n\n\n\nGT Table with Game Excitment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_by_play_2021 <- read_rds(\"Documents/nfl/data/pbp/play_by_play_2021.rds\")\n```\n:::\n\n\n\n### Game Excitement Index  \n\n\n$$\n\\frac{2400}{\\text{Length of Game}} \\sum_{i = 2}^{\\text{n plays}} \\mid \\text{WinProb(i) - WinProb(i - 1)} \\mid\n$$\n\n\n> the formula sums the absolute value of the win probability change from each play\n\n`https://sports.sites.yale.edu/game-excitement-index-part-ii`\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#Calculate average length of 2019 games for use in our function\navg_length = data.groupby(by = ['game_id'])['epa'].count().mean()\n\ndef calc_gei(game_id):\n  game = data[(data['game_id']==game_id)]\n  #Length of game\n  length = len(game)\n  #Adjusting for game length\n  normalize = avg_length / length\n  #Get win probability differences for each play\n  win_prob_change = game['home_wp'].diff().abs()\n  #Normalization\n  gei = normalize * win_prob_change.sum()\n  return gei\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_gei <- function(data, this_game_id){\n  game = filter(data, game_id == this_game_id)\n  length = length(game)\n  normalise = avg_length / length\n  #Get win probability differences for each play\n  win_prob_change = select(pbp, home_wp) %>% lag()\n  #Normalization\n  gei = normalise * win_prob_change %>% sum()\n  return(gei)\n}\n\npbp %>%\n  calc_gei('2021_20_BUF_KC')\n\nplay_by_play_2021 %>%\n  filter(game_id == '2021_20_BUF_KC') %>%\n  summarise(\n    normalise = avg_length / length(game_id),\n    win_prob_change = diff(home_wp) %>% abs(),\n    gei = normalise * win_prob_change %>% sum(na.rm = TRUE)\n  )\n\ncalc_gei <- function(data, this_game_id){\n  game = filter(data, game_id == this_game_id)\n  length = length(game)\n  normalise = avg_length / length\n  #Get win probability differences for each play\n  win_prob_change = select(pbp, home_wp) %>% lag()\n  #Normalization\n  gei = normalise * win_prob_change %>% sum()\n  return(gei)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Calculate average length of 2019 games for use in our function\n#avg_length = data.groupby(by = ['game_id'])['epa'].count().mean()\n\navg_length <- play_by_play_2021 %>%\n  group_by(game_id) %>%\n  count() %>%\n  ungroup() %>%\n  summarise(mean(n)) %>%\n  pull()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngei_games <- play_by_play_2021 %>%\n  group_by(game_id) %>%\n  summarise(\n    normalise = avg_length / length(game_id),\n    win_prob_change = diff(home_wp) %>% abs(),\n    gei = normalise * win_prob_change %>% sum(na.rm = TRUE)\n  ) %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  select(game_id, gei)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngei_joined <- play_by_play_2021 %>%\n  select(game_id, home_team, away_team, week) %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  left_join(gei_games)\n\nlead_changes <- play_by_play_2021 %>%\n  group_by(game_id) %>%\n  mutate(\n    team_leading = case_when(\n      total_home_score - total_away_score > 0 ~ 'home',\n      total_home_score - total_away_score < 0 ~ 'away',\n      TRUE ~ 'tie'),\n    lead_change = if_else(team_leading == lag(team_leading), 0, 1)\n  ) %>%\n  select(game_id, lead_change) %>%\n  summarise(\n    lead_changes = sum(lead_change, na.rm = TRUE)\n  )\n\ngei_joined <- gei_joined %>%\n  left_join(lead_changes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#fig.height=5\ngei_joined %>%\n  select(-game_id) %>%\n  mutate(\n    week = case_when(\n      week == 19 ~ 'Wild Card',\n      week == 20 ~ 'Divisional',\n      TRUE ~ as.character(week)\n    ),\n    gei = round(gei, 2)\n    ) %>% \n  slice_max(gei, n = 15) %>%\n  arrange(-gei) %>%\n  gt() %>%\n  tab_spanner(\n    label = \"TEAMS\",\n    columns = c(home_team, away_team)\n  ) %>%\n  data_color(\n    columns = c(gei),\n    colors = scales::col_numeric(\n      palette = c(\"#ffffcc\", \"#2c7fb8\"), #\"white\", #3fc1c9\n      domain = NULL\n    )\n  ) %>% \n  cols_label(\n    home_team = \"HOME TEAM\",\n    away_team = \"AWAY TEAM\",\n    week = \"WEEK\",\n    gei = \"GEI\"\n  ) %>% \n  tab_source_note(\n    source_note = md(\"Data: nflfastR<br>TABLE: @becausejustyn\")\n  ) %>% \n  gt_theme_538_v2(table.width = px(550))\n```\n:::\n\n\nPhilly vs LAC was the only game with 10 lead changes that was not in the top 15 for GEI, likewise, NYG vs WAS was not in the top 15 despite 9 lead changes, however, that is excused \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngei_joined %>%\n  select(-game_id) %>%\n  mutate(\n    week_var = case_when(\n      week == 19 ~ 'Wild Card',\n      week == 20 ~ 'Divisional',\n      TRUE ~ as.numeric(week)\n    )\n  ) %>%\n  arrange(-gei) %>%\n  gt() %>%\n  tab_spanner(\n    label = \"TEAMS\",\n    columns = c(home_team, away_team)\n  ) %>%\n  data_color(\n    columns = c(gei),\n    colors = scales::col_numeric(\n      palette = c(\"white\", \"#3fc1c9\"),\n      domain = NULL\n    )\n  ) %>% \n  cols_label(\n    home_team = \"HOME TEAM\",\n    away_team = \"AWAY TEAM\",\n    week = \"WEEK\",\n    gei = \"GEI\"\n  ) %>% \n  tab_source_note(\n    source_note = md(\"Data: nflfastR<br>TABLE: @becausejustyn\")\n  ) %>% \n  gt_theme_538(table.width = px(550))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngei_joined <- play_by_play_2021 %>%\n  select(game_id, home_team, away_team, week, home_score, away_score) %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  left_join(gei_games)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# https://www.kaylinpavlik.com/how-to-watch-as-little-football-as-possible/\n# get number of lead changes\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplay_by_play_2021 %>%\n  filter(between(wp, .3, .7)) %>%\n  group_by(game_id) %>%\n  mutate(fun = length(game_id)) %>%\n  select(game_id, fun) %>%\n  distinct(game_id, .keep_all = TRUE) %>%\n  arrange(-fun)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}