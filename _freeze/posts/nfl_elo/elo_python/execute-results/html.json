{
  "hash": "8a6f69283c392c80ecd496224d695e86",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nexecute: \n  freeze: true\n  eval: false\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n## Elo Python\n\n`https://andr3w321.com/elo-ratings-part-1/`\n\nFor a simple overview of Elo everyone with no record is assigned a default rating of 1500. \n\nIf two teams rated at 1500 play each other with a k value of 20: \n\n- the winner would end up with a 1510 rating,\n- the loser ending on a 1490 rating. \n\nThe trick of Elo comes when two teams of drastically different ratings play each other. \n\nFor example when 1600 beats 1400 with a K value of 20, the new ratings are only 1602 and 1398. Not much changed â€“ only a difference of 2 because the favorite won and was expected to win. However, if 1400 beats 1600, the new ratings would be 1418 and 1582. A much bigger change of 18, because a huge upset occurred its likely that the original 1400 and 1600 rating were incorrect.\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, k=20, drawn=False):\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    if drawn == True:\n        s1 = 0.5\n        s2 = 0.5\n    else:\n        s1 = 1\n        s2 = 0\n    new_p1 = p1 + k * (s1 - exp_p1)\n    new_p2 = p2 + k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n    \n# if you need a win probability function\n\ndef win_probability(p1, p2):\n    diff = p1 - p2\n    p = 1 - 1 / (1 + 10 ** (diff / 400.0))\n    return(p)\n```\n\n\nExample of the code\n\n``` {.python .cell-code}\nrate_1vs1(1600,1400)\n#(1601.8181818181818, 1398.1818181818182)\nrate_1vs1(1400,1600)\n#(1418.1818181818182, 1581.8181818181818)\nwin_probability(1600,1400)\n#0.759746926647958\n```\n\n\n`https://andr3w321.com/elo-ratings-part-2-margin-of-victory-adjustments/`\n\n### Margin of Victory Adjustments\n\nFor mov, fivethirtyeight uses the function ln(abs(mov) + 1)\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, mov = 1, k = 20, drawn = False):\n    k_multiplier = 1.0\n    if mov >= 7:\n        k_multiplier = 2.0\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    if drawn == True:\n        s1 = 0.5\n        s2 = 0.5\n    else:\n        s1 = 1\n        s2 = 0\n    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n```\n\n\nAutocorrelation Lets say instead of two neutral teams playing each other on a neutral field we have two mismatched teams playing each other. We would have four possible outcomes\n\n1)favorite wins small\n2)favorite wins big\n3)underdog wins small\n4)underdog wins big\n\n``` {.python .cell-code}\nrate_1vs1(1550,1450,1,20)\n#(1560.0, 1440.0)\nrate_1vs1(1550,1450,14,20)\n#(1570.0, 1430.0)\nrate_1vs1(1450,1550,1,20)\n#(1460.0, 1540.0)\nrate_1vs1(1450,1550,14,20)\n#(1470.0, 1530.0)\n```\n\n\nTo have a variable k multiplyer to reward underdog wins and punish good teams for losing to bad teams, we can use he equation (2.2/((ELOW-ELOL)*.001+2.2))\n\n\n\n$$\n\\frac{2.2}{((ELOW - ELOL) \\times 0.001 + 2.2)}\n$$\n\n\nFor example, if the favorite wins we have $2.2/(100 * 0.001 + 2.2) = 0.956$ and when the underdog wins we have $2.2/(-100 * 0.001 + 2.2) = 1.048$. Our rewritten elo rating function will be\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, mov=1, k=20, drawn=False):\n    k_multiplier = 1.0\n    corr_m = 1.0\n    if mov >= 7:\n        k_multiplier = 2.0\n        corr_m = 2.2 / ((p1 - p2)*.001 + 2.2)\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    if drawn == True:\n        s1 = 0.5\n        s2 = 0.5\n    else:\n        s1 = 1\n        s2 = 0\n    new_p1 = p1 + k_multiplier * corr_m * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * corr_m * k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n    \n#Our new ratings\nrate_1vs1(1550,1450,1,20)\n#(1560.0, 1440.0)\nrate_1vs1(1550,1450,14,20)\n#(1569.1304347826087, 1430.8695652173913)\nrate_1vs1(1450,1550,1,20)\n#(1460.0, 1540.0)\nrate_1vs1(1450,1550,14,20)\n#(1470.952380952381, 1529.047619047619)\n```\n\n\n",
    "supporting": [
      "elo_python_files"
    ],
    "filters": [],
    "includes": {}
  }
}