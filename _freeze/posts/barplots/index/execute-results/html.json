{
  "hash": "4089bc151f1a5b5714a697dff34c5461",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nformat: html\nexecute: \n  eval: false\n---\n\n\nI have been planning on writing a post for a few weeks, but I keep changing my mind on what I want to write about. I have been going through my Github profile lately and tidying it up. It has made me realise how much code I had stashed away that I did not need, so I am trying to get into the habit of only keeping code that is available on Github to keep organised and accountable. \n\nI have also been doing a lot of NFL data viz, which I found a lot harder than I thought it would be. I'll share them at a later date, but I thought I would do a quick post at 11pm at some tricks I learnt with using text labels. I thought I would use the penguins dataset from `palmerpenguins` since it does not appear to be as common as others such as `mtcars`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(gt)\nlibrary(becausejustynfun) #personal package with plotting theme\n\npenguins <- palmerpenguins::penguins\n```\n:::\n\n\n\nEven though I am using the cleaned version, I find it good practice to use `glimpse()` just to be safe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% glimpse()\n```\n:::\n\n\nNext, I am checking for missing values. \n\n::: {.cell}\n\n```{.r .cell-code}\n#penguins %>%\n#  summarise(across(everything(), ~sum(is.na(.))))\n\npenguins %>% map_dbl(~sum(is.na(.)))\n```\n:::\n\n\nTo see how I will deal with them I like to see the unique values across each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#penguins %>%\n#  summarise(across(everything(), n_distinct))\n\npenguins %>% \n  map_dbl(~n_distinct(.))\n```\n:::\n\n\nI'll have a glance at the missing values to see if they are important.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(if_any(everything(), is.na)) \n```\n:::\n\n\nGiven the `NA` values were low, I will just drop them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>%\n  na.exclude()\n\n#to check\nmap_dfc(penguins, sum(is.na(penguins)))\n#map_df(penguins, .f = sum(is.na(penguins)))\n```\n:::\n\n\nI am going to create a seperate df with the count values. You can easily just use `add_count()`, or just rely on `ggplot2` to do that for you, but later on we are going to make more adjustments to the df that will make it easier if there is a mistake.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#df of counts\npenguins_sum <- penguins %>%\n  count(species, sort = TRUE) %>% \n  mutate(\n    species = fct_rev(fct_inorder(species)),\n    perc = paste0(sprintf(\"%4.1f\", n / sum(n) * 100), \"%\") #percentage label\n    )\n\n#scales alternative\n#mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\nggplot(aes(x = n, y = species)) +\n  geom_col(fill = \"gray70\") +\n  ## add percentage labels\n  geom_text(aes(label = perc)) +\n  white_theme()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## prepare non-aggregated data set with lumped and ordered factors\npenguins_fct <- penguins %>% \n  dplyr::mutate(\n    total = dplyr::n(),\n    species = stringr::str_to_title(species),\n    species = forcats::fct_rev(forcats::fct_infreq(species))\n  )\n\npenguins_sum <- penguins_sum %>% \n  mutate(\n    colour = case_when(\n      row_number() == 1 ~ \"#468499\",\n      row_number() == 2 ~ \"#E697AC\",\n      row_number() == 3 ~ \"#81CDE6\",\n      ## all others should be gray\n      TRUE ~ \"gray70\"\n    )\n  )\n```\n:::\n\n\nThis is one approach were we conditionally colour each variable of choice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc),\n    hjust = 1, nudge_x = -.5\n  ) +\n  ## add custom colors\n  scale_fill_identity(guide = \"none\") +\n  white_theme()\n```\n:::\n\n\nWe also have a lot of control over the font used. There can be challenges when installing a font onto your system for the first time, but I might go through that another time since I struggled with it for quite a while. Maybe I am just a silly billy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\nggplot(aes(\n  x = n, \n  y = species, \n  fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc), \n    hjust = 1, nudge_x = -.5,\n    size = 4, fontface = \"bold\", family = \"Fira Sans\"\n  ) +\n  ## reduce spacing between labels and bars\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() \n```\n:::\n\n\nSometimes the colour of the font does not match well with the plot. This can be challenging when you have more than a few colours, so you might not want to manually adjust every single one. One option is to add white to the label with `fill = \"white\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_label(\n    aes(label = perc), \n    hjust = 0.95, nudge_x = -.5,\n    size = 4, fontface = \"bold\",\n    ## turn into white box without outline\n    fill = \"white\", label.size = 0\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() +\n  theme(\n    axis.text.y = element_text(size = 14, hjust = 1, family = \"Fira Sans\"),\n    plot.margin = margin(rep(15, 4))\n  )\n```\n:::\n\n\nLikewise, it is possible to adjust the position of the text labels conditionally. I think `ggplot2` biggest challenge is learning what you can do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>% \n  mutate(\n    ## set justification based on data \n    ## so that only the first label is placed inside\n    place = if_else(row_number() == 1, 1, 0),\n    ## add some spacing to labels since we cant use nudge_x anymore\n    perc = paste(\" \", perc, \" \")\n  ) %>% \n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc, hjust = place), \n    fontface = \"bold\"\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() +\n  theme(\n    plot.margin = margin(rep(15, 4))\n  )\n```\n:::\n\n\nYou can use different positions of text labels to highlight things of interest, or sometimes adjusting it makes it easier to work around other features of the plot such as the background or legend. \n\nThat is all for today. I'll try to post next week about more data viz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}