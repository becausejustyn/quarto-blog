{
  "hash": "22a766dd063bda52e1b483cae8c41e2b",
  "result": {
    "markdown": "---\ntitle: \"Untitled\"\nexecute: \n  freeze: true\n  eval: true\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n\nI have been planning on writing a post for a few weeks, but I keep changing my mind on what I want to write about. I have been going through my Github profile lately and tidying it up. It has made me realise how much code I had stashed away that I did not need, so I am trying to get into the habit of only keeping code that is available on Github to keep organised and accountable. \n\nI have also been doing a lot of NFL data viz, which I found a lot harder than I thought it would be. I'll share them at a later date, but I thought I would do a quick post at 11pm at some tricks I learnt with using text labels. I thought I would use the penguins dataset from `palmerpenguins` since it does not appear to be as common as others such as `mtcars`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(gt)\nlibrary(becausejustynfun) #personal package with plotting theme\n\npenguins <- palmerpenguins::penguins\n```\n:::\n\n\n\nEven though I am using the cleaned version, I find it good practice to use `glimpse()` just to be safe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\nNext, I am checking for missing values. \n\n::: {.cell}\n\n```{.r .cell-code}\n#penguins %>%\n#  summarise(across(everything(), ~sum(is.na(.))))\n\npenguins %>% map_dbl(~sum(is.na(.)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          species            island    bill_length_mm     bill_depth_mm \n                0                 0                 2                 2 \nflipper_length_mm       body_mass_g               sex              year \n                2                 2                11                 0 \n```\n:::\n:::\n\n\nTo see how I will deal with them I like to see the unique values across each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#penguins %>%\n#  summarise(across(everything(), n_distinct))\n\npenguins %>% \n  map_dbl(~n_distinct(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          species            island    bill_length_mm     bill_depth_mm \n                3                 3               165                81 \nflipper_length_mm       body_mass_g               sex              year \n               56                95                 3                 3 \n```\n:::\n:::\n\n\nI'll have a glance at the missing values to see if they are important.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(if_any(everything(), is.na)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           NA            NA                  NA          NA\n 2 Adelie  Torgersen           34.1          18.1               193        3475\n 3 Adelie  Torgersen           42            20.2               190        4250\n 4 Adelie  Torgersen           37.8          17.1               186        3300\n 5 Adelie  Torgersen           37.8          17.3               180        3700\n 6 Adelie  Dream               37.5          18.9               179        2975\n 7 Gentoo  Biscoe              44.5          14.3               216        4100\n 8 Gentoo  Biscoe              46.2          14.4               214        4650\n 9 Gentoo  Biscoe              47.3          13.8               216        4725\n10 Gentoo  Biscoe              44.5          15.7               217        4875\n11 Gentoo  Biscoe              NA            NA                  NA          NA\n# … with 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nGiven the `NA` values were low, I will just drop them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>%\n  na.exclude()\n\n#to check\nmap_dfc(penguins, sum(is.na(penguins)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 0\n```\n:::\n\n```{.r .cell-code}\n#map_df(penguins, .f = sum(is.na(penguins)))\n```\n:::\n\n\nI am going to create a seperate df with the count values. You can easily just use `add_count()`, or just rely on `ggplot2` to do that for you, but later on we are going to make more adjustments to the df that will make it easier if there is a mistake.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#df of counts\npenguins_sum <- penguins %>%\n  count(species, sort = TRUE) %>% \n  mutate(\n    species = fct_rev(fct_inorder(species)),\n    perc = paste0(sprintf(\"%4.1f\", n / sum(n) * 100), \"%\") #percentage label\n    )\n\n#scales alternative\n#mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\nggplot(aes(x = n, y = species)) +\n  geom_col(fill = \"gray70\") +\n  ## add percentage labels\n  geom_text(aes(label = perc)) +\n  white_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## prepare non-aggregated data set with lumped and ordered factors\npenguins_fct <- penguins %>% \n  dplyr::mutate(\n    total = dplyr::n(),\n    species = stringr::str_to_title(species),\n    species = forcats::fct_rev(forcats::fct_infreq(species))\n  )\n\npenguins_sum <- penguins_sum %>% \n  mutate(\n    colour = case_when(\n      row_number() == 1 ~ \"#468499\",\n      row_number() == 2 ~ \"#E697AC\",\n      row_number() == 3 ~ \"#81CDE6\",\n      ## all others should be gray\n      TRUE ~ \"gray70\"\n    )\n  )\n```\n:::\n\n\nThis is one approach were we conditionally colour each variable of choice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc),\n    hjust = 1, nudge_x = -.5\n  ) +\n  ## add custom colors\n  scale_fill_identity(guide = \"none\") +\n  white_theme()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWe also have a lot of control over the font used. There can be challenges when installing a font onto your system for the first time, but I might go through that another time since I struggled with it for quite a while. Maybe I am just a silly billy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\nggplot(aes(\n  x = n, \n  y = species, \n  fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc), \n    hjust = 1, nudge_x = -.5,\n    size = 4, fontface = \"bold\", family = \"Fira Sans\"\n  ) +\n  ## reduce spacing between labels and bars\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nSometimes the colour of the font does not match well with the plot. This can be challenging when you have more than a few colours, so you might not want to manually adjust every single one. One option is to add white to the label with `fill = \"white\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>%\n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_label(\n    aes(label = perc), \n    hjust = 0.95, nudge_x = -.5,\n    size = 4, fontface = \"bold\",\n    ## turn into white box without outline\n    fill = \"white\", label.size = 0\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() +\n  theme(\n    axis.text.y = element_text(size = 14, hjust = 1, family = \"Fira Sans\"),\n    plot.margin = margin(rep(15, 4))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nLikewise, it is possible to adjust the position of the text labels conditionally. I think `ggplot2` biggest challenge is learning what you can do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_sum %>% \n  mutate(\n    ## set justification based on data \n    ## so that only the first label is placed inside\n    place = if_else(row_number() == 1, 1, 0),\n    ## add some spacing to labels since we cant use nudge_x anymore\n    perc = paste(\" \", perc, \" \")\n  ) %>% \n  ggplot(aes(\n    x = n, \n    y = species, \n    fill = colour)) +\n  geom_col() +\n  geom_text(\n    aes(label = perc, hjust = place), \n    fontface = \"bold\"\n  ) +\n  scale_x_continuous(expand = c(.01, .01)) +\n  scale_fill_identity(guide = \"none\") +\n  white_theme() +\n  theme(\n    plot.margin = margin(rep(15, 4))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nYou can use different positions of text labels to highlight things of interest, or sometimes adjusting it makes it easier to work around other features of the plot such as the background or legend. \n\nThat is all for today. I'll try to post next week about more data viz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/en_GB.UTF-8/C/en_GB.UTF-8/en_GB.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] becausejustynfun_0.0.0.9000 gt_0.3.1                   \n [3] janitor_2.1.0               forcats_0.5.1              \n [5] stringr_1.4.0               dplyr_1.0.9                \n [7] purrr_0.3.4                 readr_2.1.2                \n [9] tidyr_1.2.0                 tibble_3.1.7               \n[11] ggplot2_3.3.6               tidyverse_1.3.1            \n[13] palmerpenguins_0.1.0       \n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.8.3           lubridate_1.8.0        assertthat_0.2.1      \n [4] digest_0.6.29          utf8_1.2.2             R6_2.5.1              \n [7] cellranger_1.1.0       backports_1.4.1        reprex_2.0.1          \n[10] evaluate_0.15          httr_1.4.3             pillar_1.7.0          \n[13] rlang_1.0.2            readxl_1.3.1           rstudioapi_0.13.0-9000\n[16] rmarkdown_2.14         labeling_0.4.2         htmlwidgets_1.5.4     \n[19] munsell_0.5.0          broom_0.8.0            compiler_4.1.2        \n[22] modelr_0.1.8           xfun_0.31.2            pkgconfig_2.0.3       \n[25] htmltools_0.5.2        tidyselect_1.1.2       fansi_1.0.3           \n[28] crayon_1.5.1           tzdb_0.2.0             dbplyr_2.1.1          \n[31] withr_2.5.0            grid_4.1.2             jsonlite_1.8.0        \n[34] gtable_0.3.0           lifecycle_1.0.1        DBI_1.1.2             \n[37] magrittr_2.0.3         scales_1.2.0           cli_3.3.0             \n[40] stringi_1.7.6          farver_2.1.0           renv_0.15.5           \n[43] fs_1.5.2               ggthemes_4.2.4         snakecase_0.11.0      \n[46] xml2_1.3.3             ellipsis_0.3.2         generics_0.1.2        \n[49] vctrs_0.4.1            tools_4.1.2            glue_1.6.2            \n[52] hms_1.1.1              fastmap_1.1.0          yaml_2.3.5            \n[55] colorspace_2.0-3       rvest_1.0.2            knitr_1.39            \n[58] haven_2.4.3           \n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}